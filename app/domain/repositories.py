from typing import Protocol, List, Optional, Dict, Any
from .models import Question

class QuestionRepo(Protocol):
    async def all(self) -> List[Question]: ...
    async def insert(self, question: str, answer: str) -> None: ...
    async def random_qa(self) -> Optional[Question]: ...
    async def exists_question(self, question: str) -> bool: ...
    async def delete_by_text(self, question_text: str) -> None: ...
    async def get_unused(self) -> List[Question]: ...
    async def mark_used(self, ids: List[int]) -> None: ...
    async def reset_used(self) -> None: ...
    async def get_by_ids(self, ids: List[int]) -> List[Question]: ...

class DayCounterRepo(Protocol):
    async def get(self) -> int: ...
    async def set(self, day: int) -> None: ...

class DailyMessageRepo(Protocol):
    async def get_by_day(self, day: int) -> str: ...

class ScoreRepo(Protocol):
    async def fetch_all(self) -> Dict[str, Dict[str, Any]]: ...
    async def upsert(self, user_id: int, day: int, answered: int, score: int, msg_ids: list) -> None: ...
    async def fetch_rows(self) -> List[Dict[str, Any]]: ...
