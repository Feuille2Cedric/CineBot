import random
from discord.ext import commands
from app.domain.repositories import QuestionRepo

class DevinetteCmd(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.qrepo: QuestionRepo = bot.repos["questions"]

    @commands.command(name="devinette")
    async def devinette(self, ctx):
        # Choisir 4 films au hasard avec leurs m√©tadonn√©es
        query = """
        SELECT q.id, q.question, q.answer, qm.category, qm.genre, qm.release_date, qm.rating, qm.franchise
        FROM questions q
        JOIN question_metadata qm ON q.id = qm.question_id
        ORDER BY RANDOM() LIMIT 4;
        """
        movies = await self.bot.db.fetch(query)

        print(f"Films r√©cup√©r√©s : {movies}")  # Affiche les films r√©cup√©r√©s

        # V√©rifier si des films sont r√©cup√©r√©s
        if not movies:
            await ctx.send("Aucun film n'a √©t√© r√©cup√©r√©, v√©rifier la base de donn√©es.")
            return

        # G√©n√©rer une question al√©atoire
        question_type = random.choice([
            "oldest",  # Le plus vieux
            "newest",  # Le plus r√©cent
            "genre",   # Genre sp√©cifique
        ])

        if question_type == "oldest":
            # Trouver le film le plus vieux
            oldest_movie = min(movies, key=lambda x: x['release_date'])
            correct_answer = oldest_movie['id']
            question = f"Parmi ces films, lequel est le plus vieux ?"

        elif question_type == "newest":
            # Trouver le film le plus r√©cent
            newest_movie = max(movies, key=lambda x: x['release_date'])
            correct_answer = newest_movie['id']
            question = f"Parmi ces films, lequel est le plus r√©cent ?"

        elif question_type == "genre":
            # Choisir un genre sp√©cifique (ex: Com√©die)
            genre = random.choice(["Com√©die", "Drame", "Action", "Animation", "Science-Fiction"])
            genre_movies = [movie for movie in movies if genre in movie['genre']]
            correct_answer = random.choice(genre_movies)['id']
            question = f"Parmi ces films, lequel appartient au genre {genre} ?"

        print(f"Question pos√©e : {question}")  # Affiche la question g√©n√©r√©e

        # Envoyer la question
        msg = await ctx.send(question)

        # R√©actions pour chaque film
        for idx, movie in enumerate(movies, start=1):
            await msg.add_reaction(f"{idx}\u20e3")  # Emoji 1Ô∏è‚É£, 2Ô∏è‚É£, 3Ô∏è‚É£...

        # Attendre la r√©ponse
        def check(reaction, user):
            return user == ctx.author and str(reaction.emoji) in ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£']

        reaction = await self.bot.wait_for('reaction_add', check=check)

        # V√©rifier la r√©ponse
        answer_index = ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£'].index(str(reaction.emoji)) + 1
        if movies[answer_index - 1]['id'] == correct_answer:
            await ctx.send("Bravo, tu as trouv√© la bonne r√©ponse ! üéâ")
        else:
            await ctx.send(f"Dommage, la bonne r√©ponse √©tait : le film **{movies[correct_answer - 1]['question']}**.")

async def setup(bot):
    if bot.get_cog("DevinetteCmd") is None:
        await bot.add_cog(DevinetteCmd(bot))
